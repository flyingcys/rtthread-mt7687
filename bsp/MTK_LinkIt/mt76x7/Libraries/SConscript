import rtconfig
Import('RTT_ROOT')
from building import *

# get current directory
cwd = GetCurrentDir()

# The set of source files associated with this SConscript file.
src = Split("""
	chip/mt7687/src/common/cos_api.c
	chip/mt7687/src/common/dma.c
	chip/mt7687/src/common/flash_sfc.c
	chip/mt7687/src/common/gpt.c
	chip/mt7687/src/common/hal_I2C.c
	chip/mt7687/src/common/hal_i2s_internal.c
	chip/mt7687/src/common/low_hal_irtx.c
	chip/mt7687/src/common/low_hal_pwm.c
	chip/mt7687/src/common/hal_gpc.c
	chip/mt7687/src/common/hal_gpio_7687.c
	chip/mt7687/src/common/hal_irrx.c
	chip/mt7687/src/common/hal_lp.c
	chip/mt7687/src/common/hal_pcnt.c
	chip/mt7687/src/common/hal_pinmux.c
	chip/mt7687/src/common/hal_spim.c
	chip/mt7687/src/common/hal_sys.c
	chip/mt7687/src/common/hal_trng.c
	chip/mt7687/src/common/hal_uid.c
	chip/mt7687/src/common/i2c.c
	chip/mt7687/src/common/ir_tx.c
	chip/mt7687/src/common/low_hal_gpio.c
	chip/mt7687/src/common/low_hal_irrx.c
	chip/mt7687/src/common/low_hal_rtc.c
	chip/mt7687/src/common/low_hal_wdt.c
	chip/mt7687/src/common/nvic.c
	chip/mt7687/src/common/pinmux.c
	chip/mt7687/src/common/pwm.c
	chip/mt7687/src/common/sfc.c
	chip/mt7687/src/common/spi_flash.c
	chip/mt7687/src/common/spim.c
	chip/mt7687/src/common/timer.c
	chip/mt7687/src/common/top.c
	chip/mt7687/src/common/uart.c
""")

src += Split("""
	chip/mt7687/src/hal_log.c
	chip/mt7687/src/hal_adc.c
	chip/mt7687/src/hal_aes.c
	chip/mt7687/src/hal_cache.c
	chip/mt7687/src/hal_cache_internal.c
	chip/mt7687/src/hal_des.c
	chip/mt7687/src/hal_eint.c
	chip/mt7687/src/hal_nvic.c
	chip/mt7687/src/hal_nvic_internal.c
	chip/mt7687/src/hal_flash.c
	chip/mt7687/src/hal_gpio.c
	chip/mt7687/src/hal_i2c_master.c
	chip/mt7687/src/hal_i2s.c
	chip/mt7687/src/hal_irtx.c
	chip/mt7687/src/hal_gdma.c
	chip/mt7687/src/hal_gpt.c
	chip/mt7687/src/hal_md5.c
	chip/mt7687/src/hal_pwm.c
	chip/mt7687/src/hal_rtc.c
	chip/mt7687/src/hal_sha.c
	chip/mt7687/src/hal_spi_master.c
	chip/mt7687/src/hal_spi_slave.c
	chip/mt7687/src/hal_uart.c
	chip/mt7687/src/hal_audio_internal_service.c
	chip/mt7687/src/hal_wdt.c
	chip/mt7687/src/hal_misc.c
	chip/mt7687/src/hal_dwt.c
""")

src += Split("""
	chip/mt7687/src_core/hal_efuse.c
	chip/mt7687/src_core/hal_sleep_driver.c
	chip/mt7687/src_core/hal_sleep_manager.c
""")

src += Split("""
	board/mt76x7_hdk/external_flash/src/bsp_flash_config.c
""")

src += Split("""
		service/src/syslog.c
""")




# starupt scripts for each STM32 kind
startup_scripts = {}
startup_scripts['mt7687']     = 'startup_mt7687.s'
#startup_scripts['STM32F10X_HD']     = 'startup_stm32f10x_hd.s'
#startup_scripts['STM32F10X_HD_VL']  = 'startup_stm32f10x_hd_vl.s'
#startup_scripts['STM32F10X_LD']     = 'startup_stm32f10x_ld.s'
#startup_scripts['STM32F10X_LD_VL']  = 'startup_stm32f10x_ld_vl.s'
#startup_scripts['STM32F10X_MD']     = 'startup_stm32f10x_md.s'
#startup_scripts['STM32F10X_MD_VL']  = 'startup_stm32f10x_md_vl.s'
#startup_scripts['STM32F10X_XL']	    = 'startup_stm32f10x_xl.s'

# add for startup script 
if rtconfig.CROSS_TOOL == 'gcc':
	src += Split("""
			startup/mt7687/gcc/system_mt7687.c
			startup/mt7687/gcc/main.c
""")
	src = src + ['startup/mt7687/gcc/' + startup_scripts['mt7687']]
elif rtconfig.CROSS_TOOL == 'keil':
    src = src + ['startup/mt7687/arm/' + startup_scripts['mt7687']]
elif rtconfig.CROSS_TOOL == 'iar':
    src = src + ['startup/mt7687/iar/' + startup_scripts['mt7687']]

path = [cwd + '/inc',
	cwd + '/service/inc',
	cwd + '/chip/inc']

path += [cwd + '/chip/mt7687/inc',
    cwd + '/chip/mt7687/src/common/include']

path += [cwd + '/board/mt76x7_hdk/external_flash/inc']

path += [cwd + '/CMSIS/Include']
#mt7687
path += [cwd + '/CMSIS/Device/MTK/mt7687/Include']

#gcc
path += [cwd + '/chip/mt7687/src_core/GCC/inc']
path += [cwd + '/startup/mt7687/gcc']



if GetDepend(['RT_USING_BSP_CMSIS']):
    path += [cwd + '/CMSIS/CM3/CoreSupport']
    src += [cwd + '/CMSIS/CM3/CoreSupport/core_cm3.c']
elif GetDepend(['RT_USING_RTT_CMSIS']):
    path += [RTT_ROOT + '/components/CMSIS/Include']

#CPPDEFINES = ['USE_STDPERIPH_DRIVER', rtconfig.STM32_TYPE]
CPPDEFINES = []
group = DefineGroup('STM32_StdPeriph', src, depend = [''], CPPPATH = path, CPPDEFINES = CPPDEFINES)

Return('group')
